{"pageProps":{"locale":"de","markdown":"Ziel dieser Dokumentation ist es, die XML-Schnittstelle der\nSoftwarechallenge festzuhalten.\n\n[PDF-Version dieses Dokumentes](xml-dokumentation.pdf)\n\nWir freuen uns über sämtliche Verbesserungsvorschläge. Die Dokumentation\nkann [direkt auf GitHub\neditiert](https://github.com/software-challenge/docs) werden, einzige\nVoraussetzung ist eine kostenlose Registrierung bei GitHub. Ist man\nangemeldet, kann man ein Dokument auswählen (ein guter Startpunkt ist\ndie Datei\n[index.md](https://github.com/software-challenge/docs/blob/master/index.md)\nwelche Verweise auf alle Sektionen der Dokumentation enthält) und dann\nauf den Stift oben rechts klicken. Alternativ auch gern eine E-Mail an\n<tech@software-challenge.de>.\n\n# Einleitung\n\nWie in den letzten Jahren wird zur Computerspieler-Server Kommunikation ein\nXML-Protokoll genutzt. In diesem Dokument wird die\nKommunikationsschnittstelle definiert, sodass ein komplett eigener\n:t[Computerspieler]{#player} geschrieben werden kann. Es wird hier nicht die vollständige\nKommunikation dokumentiert bzw. definiert, dennoch alles, womit ein\n:t[Computerspieler]{#player} umgehen können muss, um spielfähig zu sein.\n\n## An wen richtet sich dieses Dokument?\n\nDie Kommunikation mit dem Spielserver ist für diejenigen, die aufbauend\nauf dem Zufallsspieler programmieren, unwichtig. Dort steht bereits ein\nfunktionierender :t[Computerspieler]{#player} bereit und es muss nur die Spiellogik entworfen\nwerden. Nur wer einen komplett eigenen :t[Computerspieler]{#player} entwerfen will,\nbeispielsweise um die Programmiersprache frei wählen zu können, benötigt\ndie Definitionen.\n\n## Hinweise\n\nFalls Sie beabsichtigen sollten, diese Kommunikationsschnittstelle zu\nrealisieren, sei darauf hingewiesen, dass es im Verlauf des Wettbewerbes\nmöglich ist, dass weitere, hier noch nicht aufgeführte Elemente zur\nKommunikationsschnittstelle hinzugefügt werden. Um auch bei solchen\nÄnderungen sicher zu sein, dass ihr :t[Computerspieler]{#player} fehlerfrei mit dem Server\nkommunizieren kann, empfehlen wir Ihnen, beim Auslesen des :t[XML]{#xml} jegliche\nDaten zu verwerfen, die hier nicht weiter definiert sind. Die vom\nInstitut bereitgestellten Programme (Server, Zufallsspieler) nutzen eine\nBibliothek um Java-Objekte direkt in :t[XML]{#xml} zu konvertieren und umgekehrt.\nDabei werden XML-Nachrichten nicht unbedingt mit einer newline\nabgeschlossen.\n\nDie :t[XML]{#xml} Dokumentation behandelt ausschließlich die Kommunikation. Falls\nSie Dokumentation für den Verbindungsaufbau suchen, so finden Sie diese\n[hier](https://docs.software-challenge.de/_computerspieler_abgabefertig_machen.html#andere-sprache).\n\n# Spiel betreten\n\nWenn begonnen wird mit dem Server zu kommunizieren, muss zuallererst\n\n    <protocol>\n\ngesendet werden, um die Kommunikation zu beginnen.\n\n## Ohne Reservierungscode\n\nBetritt ein beliebiges offenes Spiel:\n\n    <join gameType=\"swc_2021_blokus\" />\n\nSollte kein Spiel offen sein, wird so ein neues erstellt. Je nachdem ob\npaused in server.properties true oder false ist, wird das Spiel pausiert\ngestartet oder nicht. Der Server antwortet darauf mit:\n\n-   ROOM\\_ID ID des GameRooms\n\n<!-- -->\n\n    <joined roomId=\"ROOM_ID\" />\n\nAlle administrativen Clients werden ebenfalls darüber benachrichtigt und\nerhalten folgende Nachricht:\n\n-   ROOM\\_ID ID des GameRooms\n\n<!-- -->\n\n    <joinedGameRoom roomId=\"ROOM_ID\" existing=\"false\" />\n\nFalls bereits ein GameRoom offen war, ist dementsprechend existing true.\n\n## Mit Reservierungscode\n\nIst ein Reservierungscode gegeben, so kann man den durch den Code\ngegebenen Platz betreten.\n\n### Join mit Reservierungscode\n\n-   RC Reservierungscode\n\n<!-- -->\n\n    <joinPrepared reservationCode=\"RC\" />\n\n### Welcome Message\n\nDer Server antwortet darauf erst, wenn der zweite :t[Computerspieler]{#player} ebenfalls\nverbunden ist:\n\n-   ROOM\\_ID Id des GameRooms\n\n-   COLOR Spielerfarbe. Da bei Blokus jeder Spieler zwei Farben spielt,\n    ist hier nur one oder two angegeben\n\n-   STATUS GameState wie in [Status](#status)\n\n<!-- -->\n\n    <joined roomId=\"ROOM_ID\" />\n    <room roomId=\"ROOM_ID\">\n      <data class=\"welcomeMessage\" color=\"COLOR\"></data>\n    </room>\n    <room roomId=\"ROOM_ID\">\n      STATUS\n    </room>\n\nAls erstes kommt eine Bestätigung, dass das Spiel betreten wurde. Hier\nkann die Raum-ID festgestellt und für die weitere Kommunikation\ngespeichert werden. Nach der Willkommensnachricht, welche dem Spieler\nmitteilt, ob er erster oder zweiter Spieler ist, wird der initiale\nSpielstatus gesendet.\n\n# Zug-Anforderung\n\nEine einfache Nachricht fordert zum Zug auf:\n\n    <room roomId=\"ROOM_ID\">\n      <data class=\"sc.framework.plugins.protocol.MoveRequest\" />\n    </room>\n\n# Züge senden\n\n## Der Move\n\nDer Move ist die Antwort auf den MoveRequest des Servers.\n\n### Senden\n\nDer Move ist der allgemeine Zug, der in verschiedenen Varianten gesendet\nwerden kann.\n\n`ROOM_ID`  \nID des GameRooms, aus dem `MoveRequest`.\n\n`ZUG`  \nZug wie in [ZUG](#zug)\n\n<!-- -->\n\n    <room roomId=\"ROOM_ID\">\n      ZUG\n    </room>\n\n## ZUG\n\n`COLOR`  \nFarbe des zu setzenden Spielsteines (`BLUE`,`YELLOW`,`RED`,`GREEN`)\n\n`KIND`  \nTyp des zu setzenden Spielsteines (siehe [Spielsteine](#spielsteine))\n\n`ROTATION`  \nDrehung des Spielsteines (`NONE`,`RIGHT`,`MIRROR`,`LEFT`)\n\n`FLIPPED`  \nOb der Spielstein umgedreht wurde (`true`,`false`)\n\n`X`  \nX-Koordinate des zu ziehenden Spielsteines oder des Zielfeldes\n\n`Y`  \nY-Koordinate des zu ziehenden Spielsteines oder des Zielfeldes\n\nEs gibt zwei Arten von Zuegen. Entweder man setzt einen eigenen noch\nnicht gesetzten Stein auf ein Zielfeld:\n\n    <data class=\"sc.plugin2021.SetMove\">\n      <piece color=\"COLOR\" kind=\"KIND\" rotation=\"ROTATION\" isFlipped=\"FLIPPED\">\n        <position x=\"X\" y=\"Y\"/>\n      </piece>\n    </data>\n\nOder man möchte nicht setzen, dann ist es erlaubt, auszusetzen:\n\n    <data class=\"sc.plugin2021.SkipMove\">\n      <color>COLOR</color>\n    </data>\n\n### Spielstein Transformationen\n\nBei `ROTATION` `NONE` ändern sich die Koordinaten der Teile des\nSpielsteins nicht. `(x, y) ⇒ (x, y)`\n\n![pento L](./images/pento_L.png)\n\nBei `ROTATION` `RIGHT` wird der Spielstein um den Ursprung nach rechts\ngedreht. `(x, y) ⇒ (-y, x)`\n\n![pento L RIGHT](./images/pento_L_RIGHT.png)\n\nBei `ROTATION` `MIRROR` wird der Spielstein um den Ursprung gespiegelt.\n`(x, y) ⇒ (-x, -y)`\n\n![pento L MIRROR](./images/pento_L_MIRROR.png)\n\nBei `ROTATION` `LEFT` wird der Spielstein um den Ursprung nach links\ngedreht. `(x, y) ⇒ (y, -x)`\n\n![pento L LEFT](./images/pento_L_LEFT.png)\n\nWird zusätzlich `FLIPPED` auf `true` gesetzt, so werden die von der\nRotation resultierenden Koordinaten anschließend noch auf der X-Achse\ninvertiert. `(x, y) ⇒ (-x, y)`\n\n![pento L LEFT FLIPPED](./images/pento_L_LEFT_FLIPPED.png)\n\nAuf dem vorigen Bild ist das Resultat von `ROTATION` `LEFT` und\n`FLIPPED` `true` zu sehen.\n\nNach den Transformationen werden die Koordinaten noch normalisiert, d.h.\nsie werden an die obere linke Ecke angelegt.\n\nDafür werden sie mit dem minimalen X Wert aller Koordinaten und dem\nminimalen Y Wert aller Koordinaten subtrahiert.\n`(x, y) ⇒ (x - minX, y - minY)`\n\nSchließlich werden die Koordinaten noch mit den `X, Y` Werten, die zum\nMove gehören, addiert, um die Koordinaten aller Teile des Spielsteins\nauf dem Board zu erhalten.\n\n## Debughints\n\nZügen können Debug-Informationen beigefügt werden:\n\n    <hint content=\"S\" />\n\nDamit sieht beispielsweise ein Zug so aus:\n\n    <room roomId=\"ROOM_ID\">\n      <data class=\"sc.plugin2021.SetMove\">\n        <piece color=\"COLOR\" kind=\"KIND\" rotation=\"ROTATION\" isFlipped=\"FLIPPED\">\n          <position x=\"X\" y=\"Y\"/>\n        </piece>\n        <hint content=\"Dies ist ein Hint.\" />\n        <hint content=\"noch ein Hint\" />\n      </data>\n    </room>\n\n# Spielsteine\n\nEs gibt 21 verschiedene Arten Spielsteine. Alle haben im :t[XML]{#xml} einen\nNamen. Diese sind:\n\n-   `MONO`\n\n-   `DOMINO`\n\n-   `TRIO_L`\n\n-   `TRIO_I`\n\n-   `TETRO_O`\n\n-   `TETRO_T`\n\n-   `TETRO_I`\n\n-   `TETRO_L`\n\n-   `TETRO_Z`\n\n-   `PENTO_L`\n\n-   `PENTO_T`\n\n-   `PENTO_V`\n\n-   `PENTO_S`\n\n-   `PENTO_Z`\n\n-   `PENTO_I`\n\n-   `PENTO_P`\n\n-   `PENTO_W`\n\n-   `PENTO_U`\n\n-   `PENTO_R`\n\n-   `PENTO_X`\n\n-   `PENTO_Y`\n\n# Spielstatus\n\nEs folgt die Beschreibung des Spielstatus, der vor jeder Zugaufforderung\nan die Clients gesendet wird. Das Spielstatus-Tag ist dabei noch in\neinem *data*-Tag der Klasse *memento* gewrappt:\n\n## memento\n\n-   `ROOM_ID` Id des GameRooms\n\n-   `STATUS` Gamestate wie in [Status](#status)\n\n<!-- -->\n\n    <room roomId=\"ROOM_ID\">\n      <data class=\"memento\">\n        STATUS\n      </data>\n    </room>\n\n## Status\n\n-   `Z` aktuelle Zugzahl\n\n-   `R` aktuelle Rundenzahl\n\n-   `P` Spielstein, der in der ersten Runde gelegt werden muss, siehe\n    [Spielsteine](#spielsteine)\n\n-   `T` Team, welches beginnt (`ONE`, `TWO`)\n\n-   `board` Das Spielbrett, wie in [Spielbrett](#spielbrett) definiert\n\n-   `blueShapes`, `yellowShapes`, `redShapes`, `greenShapes` Noch nicht\n    gesetzte Spielsteine, siehe [Nicht gesetzte\n    Spielsteine](#undeployed)\n\n-   `lastMoveMono` beschreibt, wenn eine Farbe alle Steine gelegt hat,\n    ob der Mono-Stein als letztes gelegt wurde\n\n-   `validColors` alle Farben, die noch im Spiel sind\n\n-   `first` Name und auch Team des ersten Spielers.\n\n-   `second` Name und auch Team des zweiten Spielers.\n\n-   `lastMove` der zuletzt ausgeführte Zug, siehe [Vorheriger\n    Zug](#last-move)\n\n<!-- -->\n\n    <state class=\"state\" turn=\"Z\" round=\"R\" startPiece=\"P\">\n      <startTeam class=\"team\">T</startTeam>\n      blueShapes\n      yellowShapes\n      redShapes\n      greenShapes\n      validColors\n      first\n      second\n      board\n      lastMove\n      lastMoveMono\n    </state>\n\n## Spielbrett\n\n-   `X` X-Koordinate\n\n-   `Y` Y-Koordinate\n\n-   `CONTENT` Farbe des Spielsteins, der dieses Feld überdeckt\n    (`BLUE`,`YELLOW`,`RED`,`GREEN`)\n\n<!-- -->\n\n    <board>\n      <fields>\n        <field x=\"17\" y=\"0\" content=\"BLUE\"/>\n        [...]\n        <field x=\"17\" y=\"2\" content=\"BLUE\"/>\n      </fields>\n      [...]\n    </board>\n\n`<board>` enthaelt `<field>` Tags für alle Felder, die bereits belegt\nsind. Leere Felder kommen nicht vor. Grundsätzlich besteht das\nSpielbrett aber immer aus 20x20 Feldern, wobei das Feld links oben die\nX- und Y-Koordinate 0 hat und die positive X-Achste nach rechts und die\npositive Y-Achse nach unten verläuft.\n\n## Nicht gesetzte Spielsteine\n\n    <blueShapes>\n      <shape>MONO</shape>\n      <shape>DOMINO</shape>\n      <shape>TRIO_L</shape>\n      <shape>TRIO_I</shape>\n      <shape>TETRO_O</shape>\n      <shape>TETRO_T</shape>\n      <shape>TETRO_I</shape>\n      <shape>TETRO_L</shape>\n      <shape>TETRO_Z</shape>\n      <shape>PENTO_L</shape>\n      <shape>PENTO_T</shape>\n      <shape>PENTO_S</shape>\n      <shape>PENTO_Z</shape>\n      <shape>PENTO_I</shape>\n      <shape>PENTO_P</shape>\n      <shape>PENTO_W</shape>\n      <shape>PENTO_U</shape>\n      <shape>PENTO_R</shape>\n      <shape>PENTO_X</shape>\n      <shape>PENTO_Y</shape>\n    </blueShapes>\n\nDie nicht gesetzten Steine werden durch `<shape>` Tags in einem\n`<blueShapes>`, `<yellowShapes>`, `<redShapes>` und `<greenShapes>` Tag\ndargestellt.\n\n## Letzter Stein\n\n    <lastMoveMono>\n      <entry>\n        <color>YELLOW</color>\n        <boolean>true</boolean>\n      </entry>\n    </lastMoveMono>\n\nJede Farbe, die alle Steine gesetzt hat, bekommt einen `<entry>` Tag.\nDieser beschreibt fuer die Farbe im `<color>` Tag als `<boolean>`, ob\nder Mono Stein als letztes gesetzt wurde.\n\n## Farben im Spiel\n\n    <validColors>\n      <color>BLUE</color>\n      <color>YELLOW</color>\n      <color>RED</color>\n      <color>GREEN</color>\n    </validColors>\n\nAlle Farben, die noch Züge durchführen können, werden durch `<color>`\nTags dargestellt.\n\n## Erster Spieler\n\n    <first displayName=\"One\">\n      <color class=\"team\">ONE</color>\n    </first>\n\nDer erste Spieler wird wird mit dem Tag `<first>` beschrieben. Das\nAttribut \"displayName\" beinhaltet den Spielernamen des ersten Spielers.\nDer untergeordnete Tag `<color>` hält entweder den Wert `ONE` oder\n`TWO`. Hier ist dies `ONE`, also macht der erste Spieler den ersten Zug.\n\n## Zweiter Spieler\n\nDieser Tag beschreibt den zweiten Spieler. Die Struktur ist wie bei\n[Erster Spieler](#first).\n\n## Vorheriger Zug\n\n    <lastMove class=\"sc.plugin2021.SetMove\">\n      <piece color=\"BLUE\" kind=\"PENTO_V\" rotation=\"RIGHT\" isFlipped=\"false\">\n        <position x=\"17\" y=\"0\"/>\n      </piece>\n    </lastMove>\n\nDer vorherige Zug hat die selbe Struktur wie ein [ZUG](#zug), der\ngesendet wird, ausser dass das Tag `<lastMove>` und nicht `<data>`\nheisst. Der vorherige Zug wird in jedem Spielstatus angegeben, ausser\nvor dem ersten Zug.\n\n## Beispiel kompletter Spielstatus\n\nHier ist das :t[XML]{#xml} eines kompletten beispielhaften Spielstatus, wie es der\n:t[Computerspieler]{#player} vom Server bekommt:\n\n    <room roomId=\"cb3bc426-5c70-48b9-9307-943bc328b503\">\n      <data class=\"memento\">\n        <state turn=\"70\" round=\"18\" startPiece=\"PENTO_L\">\n          <startTeam class=\"team\">ONE</startTeam>\n          <blueShapes/>\n          <yellowShapes>\n            <shape>MONO</shape>\n          </yellowShapes>\n          <redShapes>\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n          </redShapes>\n          <greenShapes>\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n            <shape>TRIO_L</shape>\n            <shape>TRIO_I</shape>\n          </greenShapes>\n          <validColors>\n            <color>YELLOW</color>\n            <color>RED</color>\n            <color>GREEN</color>\n          </validColors>\n          <first displayName=\"\">\n            <color class=\"team\">ONE</color>\n          </first>\n          <second displayName=\"\">\n            <color class=\"team\">TWO</color>\n          </second>\n          <board>\n            <field x=\"0\" y=\"0\" content=\"RED\"/>\n            <field x=\"1\" y=\"3\" content=\"GREEN\"/>\n            <field x=\"8\" y=\"6\" content=\"YELLOW\"/>\n            <field x=\"5\" y=\"9\" content=\"BLUE\"/>\n          </board>\n          <lastMove class=\"sc.plugin2021.SetMove\">\n            <piece color=\"BLUE\" kind=\"MONO\" rotation=\"NONE\" isFlipped=\"false\">\n              <position x=\"0\" y=\"0\"/>\n            </piece>\n          </lastMove>\n          <lastMoveMono>\n            <entry>\n              <color>BLUE</color>\n              <boolean>true</boolean>\n            </entry>\n          </lastMoveMono>\n        </state>\n      </data>\n    </room>\n\n# Spiel verlassen\n\nWenn ein :t[Computerspieler]{#player} den Raum verlässt, bekommen die anderen Clients eine\nentsprechende Meldung vom Server.\n\n-   `ROOM_ID` Id des GameRooms\n\n<!-- -->\n\n    <left roomId=\"ROOM_ID\" />\n\n# Spielergebnis\n\nZum Spielende enthält der Spieler das Ergebnis:\n\n-   `ROOM_ID` Id des GameRooms\n\n-   `R1`, `R2` Text, der den Grund für das Spielende erklärt\n\n-   `CAUSE1`, `CAUSE2` Grund des Spielendes (`REGULAR`, `LEFT`,\n    `RULE_VIOLATION`, `SOFT_TIMEOUT`, `HARD_TIMEOUT`)\n\n-   `WP1`, `WP2` Siegpunkte der jeweiligen Spieler, 0 verloren, 1\n    unentschieden, 2 gewonnen\n\n-   `S1`, `S2` Punkte des jeweiligen Spielers\n\n-   `NAME` Anzeigename des Spielers\n\n-   `TEAM` Team des Siegers (`ONE`, `TWO`)\n\n<!-- -->\n\n    <room roomId=\"ROOM_ID\">\n      <data class=\"result\">\n        <definition>\n          <fragment name=\"Gewinner\">\n            <aggregation>SUM</aggregation>\n            <relevantForRanking>true</relevantForRanking>\n          </fragment>\n          <fragment name=\"∅ Punkte\">\n            <aggregation>AVERAGE</aggregation>\n            <relevantForRanking>true</relevantForRanking>\n          </fragment>\n        </definition>\n        <score cause=\"CAUSE1\" reason=\"R1\">\n          <part>WP1</part>\n          <part>S1</part>\n        </score>\n        <score cause=\"CAUSE2\" reason=\"R2\">\n          <part>WP2</part>\n          <part>S2</part>\n        </score>\n        <winner displayName=\"NAME\">\n          <color class=\"team\">TEAM</color>\n        </winner>\n      </data>\n    </room>\n\n# Spielverlauf\n\nDer Server startet (StandardIp: localhost 13050).\n\nNun gibt es zwei Varianten ein Spiel zu starten, eine durch einen\nAdministratorclient die andere durch hinzufügen der Spieler zu einen\nSpieltyp:\n\n## Variante 1 (AdminClient [Mit Reservierungscode](#mit-reservierungscode))\n\nEin :t[Computerspieler]{#player} registriert sich als Administrator mit dem in\nserver.properties festgelegten Passwort pw:\n\n    <protocol><authenticate password=\"pw\" />\n\nDann kann ein Spiel angelegt werden:\n\n    <prepare gameType=\"swc_2021_blokus\" pause=\"true\">\n      <slot displayName=\"p1\" canTimeout=\"false\" />\n      <slot displayName=\"p2\" canTimeout=\"false\" />\n    </prepare>\n\nDer Server antwortet darauf mit einer Nachricht, die die ROOM\\_ID und\nReservierungscodes für die beiden Clients enthält:\n\n    <protocol>\n      <prepared roomId=\"871faccb-5190-4e44-82fc-6cdcbb493726\">\n        <reservation>RC1</reservation>\n        <reservation>RC2</reservation>\n      </prepared>\n\nDer Administratorclient kann dann ebenfalls als Observer des Spiels\ngenutzt werden, indem ein entsprechender Request gesendet wird. Dadurch\nwird das derzeitge Spielfeld ([memento](#memento)) ebenfalls an den\nAdministratorclient gesendet.\n\n    <observe roomId=\"871faccb-5190-4e44-82fc-6cdcbb493726\" />\n\nClients, die auf dem Serverport (localhost 13050) gestartet werden,\nkönnen nun mit den Reservierungscodes beitreten.\n\n    <protocol>\n      <joinPrepared reservationCode=\"RC1\" />\n\n    <protocol>\n      <joinPrepared reservationCode=\"RC2\" />\n\n## Variante 2 (kein AdminClient notwendig [Ohne Reservierungscode](#ohne-reservierungscode))\n\nDie Clients wurden auf dem Serverport (Standard: localhost 13050)\ngestartet.\n\nSie können mit folgender Anfrage einem bereits offenen Spiel des\nentsprechenden Typs beitreten. Wenn noch keines vorhanden ist, wird\ndabei automatisch ein neues gestartet.\n\n    <protocol>\n      <join gameType=\"swc_2019_piranhas\" />\n\nDer Server antwortet mit:\n\n    <protocol>\n      <joined roomId=\"871faccb-5190-4e44-82fc-6cdcbb493726\" />\n\n## Weiterer Spielverlauf\n\nDer Server antwortet jeweils mit der WelcomeMessage ([Welcome\nMessage](#welcome-message)) und dem ersten GameState\n([memento](#memento)) sobald beide Spieler verbunden sind.\n\n    <room roomId=\"cb3bc426-5c70-48b9-9307-943bc328b503\">\n      <data class=\"welcomeMessage\" color=\"two\"/>\n    </room>\n    <room roomId=\"cb3bc426-5c70-48b9-9307-943bc328b503\">\n      <data class=\"memento\">\n        <state class=\"state\" turn=\"0\" round=\"1\" startPiece=\"PENTO_V\">\n          <startTeam class=\"team\">ONE</startTeam>\n          <board/>\n          <blueShapes class=\"linked-hash-set\">\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n            <shape>TRIO_L</shape>\n            <shape>TRIO_I</shape>\n            <shape>TETRO_O</shape>\n            <shape>TETRO_T</shape>\n            <shape>TETRO_I</shape>\n            <shape>TETRO_L</shape>\n            <shape>TETRO_Z</shape>\n            <shape>PENTO_L</shape>\n            <shape>PENTO_T</shape>\n            <shape>PENTO_V</shape>\n            <shape>PENTO_S</shape>\n            <shape>PENTO_Z</shape>\n            <shape>PENTO_I</shape>\n            <shape>PENTO_P</shape>\n            <shape>PENTO_W</shape>\n            <shape>PENTO_U</shape>\n            <shape>PENTO_R</shape>\n            <shape>PENTO_X</shape>\n            <shape>PENTO_Y</shape>\n          </blueShapes>\n          <yellowShapes class=\"linked-hash-set\">\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n            <shape>TRIO_L</shape>\n            <shape>TRIO_I</shape>\n            <shape>TETRO_O</shape>\n            <shape>TETRO_T</shape>\n            <shape>TETRO_I</shape>\n            <shape>TETRO_L</shape>\n            <shape>TETRO_Z</shape>\n            <shape>PENTO_L</shape>\n            <shape>PENTO_T</shape>\n            <shape>PENTO_V</shape>\n            <shape>PENTO_S</shape>\n            <shape>PENTO_Z</shape>\n            <shape>PENTO_I</shape>\n            <shape>PENTO_P</shape>\n            <shape>PENTO_W</shape>\n            <shape>PENTO_U</shape>\n            <shape>PENTO_R</shape>\n            <shape>PENTO_X</shape>\n            <shape>PENTO_Y</shape>\n          </yellowShapes>\n          <redShapes class=\"linked-hash-set\">\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n            <shape>TRIO_L</shape>\n            <shape>TRIO_I</shape>\n            <shape>TETRO_O</shape>\n            <shape>TETRO_T</shape>\n            <shape>TETRO_I</shape>\n            <shape>TETRO_L</shape>\n            <shape>TETRO_Z</shape>\n            <shape>PENTO_L</shape>\n            <shape>PENTO_T</shape>\n            <shape>PENTO_V</shape>\n            <shape>PENTO_S</shape>\n            <shape>PENTO_Z</shape>\n            <shape>PENTO_I</shape>\n            <shape>PENTO_P</shape>\n            <shape>PENTO_W</shape>\n            <shape>PENTO_U</shape>\n            <shape>PENTO_R</shape>\n            <shape>PENTO_X</shape>\n            <shape>PENTO_Y</shape>\n          </redShapes>\n          <greenShapes class=\"linked-hash-set\">\n            <shape>MONO</shape>\n            <shape>DOMINO</shape>\n            <shape>TRIO_L</shape>\n            <shape>TRIO_I</shape>\n            <shape>TETRO_O</shape>\n            <shape>TETRO_T</shape>\n            <shape>TETRO_I</shape>\n            <shape>TETRO_L</shape>\n            <shape>TETRO_Z</shape>\n            <shape>PENTO_L</shape>\n            <shape>PENTO_T</shape>\n            <shape>PENTO_V</shape>\n            <shape>PENTO_S</shape>\n            <shape>PENTO_Z</shape>\n            <shape>PENTO_I</shape>\n            <shape>PENTO_P</shape>\n            <shape>PENTO_W</shape>\n            <shape>PENTO_U</shape>\n            <shape>PENTO_R</shape>\n            <shape>PENTO_X</shape>\n            <shape>PENTO_Y</shape>\n          </greenShapes>\n          <lastMoveMono class=\"linked-hash-map\"/>\n          <validColors class=\"linked-hash-set\">\n            <color>BLUE</color>\n            <color>YELLOW</color>\n            <color>RED</color>\n            <color>GREEN</color>\n          </validColors>\n          <first displayName=\"One\">\n            <color class=\"team\">ONE</color>\n          </first>\n          <second displayName=\"Two\">\n            <color class=\"team\">TWO</color>\n          </second>\n        </state>\n      </data>\n    </room>\n\nDer erste Spieler erhält dann eine Zugaufforderung\n([???](#move-request)), falls in server.properties paused auf false\ngesetzt wurde. Falls das Spiel pausiert ist, muss das Spiel durch einen\nAdministratorclient gestartet werden:\n\nVerbinden des Administratorclients (falls es sich um die erste\nKontaktaufnahme zum Server handelt, ansonsten &lt;protocol&gt;\nweglassen).\n\n    <protocol>\n      <authenticate password=\"examplepassword\" />\n\nPausierung aufheben:\n\n    <pause roomId=\"871faccb-5190-4e44-82fc-6cdcbb493726\" pause=\"false\" />\n\nDaraufhin wird der erste Spieler aufgefordert einen Zug zu senden:\n\n    <room roomId=\"871faccb-5190-4e44-82fc-6cdcbb493726\">\n      <data class=\"sc.framework.plugins.protocol.MoveRequest\" />\n    </room>\n\nDer :t[Computerspieler]{#player} des CurrentPlayer sendet nun einen Zug ([ZUG](#zug)):\n\n    <room roomId=\"cb3bc426-5c70-48b9-9307-943bc328b503\">\n      <data class=\"sc.plugin2021.SetMove\">\n        <piece color=\"BLUE\" kind=\"PENTO_V\" rotation=\"RIGHT\" isFlipped=\"false\">\n          <position x=\"17\" y=\"0\"/>\n        </piece>\n      </data>\n    </room>\n\nSo geht es abwechselnd weiter, bis zum Spielende\n([Spielergebnis](#spielende)). Die letzte Nachricht des Servers endet\nmit:\n\n    </protocol>\n\nDanach wird die Verbindung geschlossen.\n","data":{},"navigation":{"next":{"name":"zuege-senden","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/zuege-senden.md","href":"/spiele/blokus/xml-dokumentation/zuege-senden"},"current":{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/xml-dokumentation.md","href":"/spiele/blokus/xml-dokumentation/xml-dokumentation"},"previous":{"name":"spielverlauf","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spielverlauf.md","href":"/spiele/blokus/xml-dokumentation/spielverlauf"},"sections":[{"name":"Spiele","index":1,"virtual":true,"isEmpty":true,"pages":[],"sections":[{"name":"Blokus","hide":true,"isEmpty":false,"pages":[],"sections":[{"name":"Spielregeln","hide":true,"isEmpty":true,"pages":[{"name":"content","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/spielregeln/content.md","href":"/spiele/blokus/spielregeln/content"},{"name":"regeln","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/spielregeln/regeln.md","href":"/spiele/blokus/spielregeln/regeln"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/spielregeln/index.md","href":"/spiele/blokus/spielregeln"},{"name":"XML-Dokumentation","hide":true,"isEmpty":true,"pages":[{"name":"einleitung-xml","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/einleitung-xml.md","href":"/spiele/blokus/xml-dokumentation/einleitung-xml"},{"name":"spiel-betreten","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spiel-betreten.md","href":"/spiele/blokus/xml-dokumentation/spiel-betreten"},{"name":"spiel-verlassen","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spiel-verlassen.md","href":"/spiele/blokus/xml-dokumentation/spiel-verlassen"},{"name":"spielergebnis","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spielergebnis.md","href":"/spiele/blokus/xml-dokumentation/spielergebnis"},{"name":"spielstatus","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spielstatus.md","href":"/spiele/blokus/xml-dokumentation/spielstatus"},{"name":"spielsteine","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spielsteine.md","href":"/spiele/blokus/xml-dokumentation/spielsteine"},{"name":"spielverlauf","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/spielverlauf.md","href":"/spiele/blokus/xml-dokumentation/spielverlauf"},{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/xml-dokumentation.md","href":"/spiele/blokus/xml-dokumentation/xml-dokumentation"},{"name":"zuege-senden","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/zuege-senden.md","href":"/spiele/blokus/xml-dokumentation/zuege-senden"},{"name":"zug-anforderung","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/zug-anforderung.md","href":"/spiele/blokus/xml-dokumentation/zug-anforderung"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/xml-dokumentation/index.md","href":"/spiele/blokus/xml-dokumentation"}],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/blokus/index.md","href":"/spiele/blokus"},{"name":"Hase und Igel","hide":true,"isEmpty":false,"pages":[],"sections":[{"name":"Spielregeln","hide":true,"isEmpty":true,"pages":[{"name":"beispiel","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/beispiel.md","href":"/spiele/hase-und-igel/spielregeln/beispiel"},{"name":"felder","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/felder.md","href":"/spiele/hase-und-igel/spielregeln/felder"},{"name":"regeln","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/regeln.md","href":"/spiele/hase-und-igel/spielregeln/regeln"},{"name":"spielbeginn","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/spielbeginn.md","href":"/spiele/hase-und-igel/spielregeln/spielbeginn"},{"name":"spielende","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/spielende.md","href":"/spiele/hase-und-igel/spielregeln/spielende"},{"name":"zuege","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/zuege.md","href":"/spiele/hase-und-igel/spielregeln/zuege"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/spielregeln/index.md","href":"/spiele/hase-und-igel/spielregeln"},{"name":"Tutorial","hide":true,"isEmpty":true,"pages":[{"name":"board","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/board.md","href":"/spiele/hase-und-igel/tutorial/board"},{"name":"game-rule-logic","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/game-rule-logic.md","href":"/spiele/hase-und-igel/tutorial/game-rule-logic"},{"name":"player","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/player.md","href":"/spiele/hase-und-igel/tutorial/player"},{"name":"start","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/start.md","href":"/spiele/hase-und-igel/tutorial/start"},{"name":"tutorial","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/tutorial.md","href":"/spiele/hase-und-igel/tutorial/tutorial"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/tutorial/index.md","href":"/spiele/hase-und-igel/tutorial"},{"name":"XML-Dokumentation","hide":true,"isEmpty":true,"pages":[{"name":"einleitung-xml","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/einleitung-xml.md","href":"/spiele/hase-und-igel/xml-dokumentation/einleitung-xml"},{"name":"fehler","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/fehler.md","href":"/spiele/hase-und-igel/xml-dokumentation/fehler"},{"name":"spiel-betreten","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/spiel-betreten.md","href":"/spiele/hase-und-igel/xml-dokumentation/spiel-betreten"},{"name":"spiel-verlassen","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/spiel-verlassen.md","href":"/spiele/hase-und-igel/xml-dokumentation/spiel-verlassen"},{"name":"spielergebnis","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/spielergebnis.md","href":"/spiele/hase-und-igel/xml-dokumentation/spielergebnis"},{"name":"spielstatus","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/spielstatus.md","href":"/spiele/hase-und-igel/xml-dokumentation/spielstatus"},{"name":"spielverlauf","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/spielverlauf.md","href":"/spiele/hase-und-igel/xml-dokumentation/spielverlauf"},{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/xml-dokumentation.md","href":"/spiele/hase-und-igel/xml-dokumentation/xml-dokumentation"},{"name":"zuege-senden","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/zuege-senden.md","href":"/spiele/hase-und-igel/xml-dokumentation/zuege-senden"},{"name":"zug-anforderung","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/zug-anforderung.md","href":"/spiele/hase-und-igel/xml-dokumentation/zug-anforderung"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/xml-dokumentation/index.md","href":"/spiele/hase-und-igel/xml-dokumentation"}],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hase-und-igel/index.md","href":"/spiele/hase-und-igel"},{"name":"Hey, Danke für den Fisch!","hide":true,"expanded":true,"isEmpty":false,"pages":[{"name":"Spielregeln","index":1,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/penguins/regeln.md","href":"/spiele/penguins/regeln"},{"name":"XML-Schnittstelle","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/penguins/xml.md","href":"/spiele/penguins/xml"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/penguins/index.md","href":"/spiele/penguins"},{"name":"Hive","hide":true,"isEmpty":false,"pages":[],"sections":[{"name":"Spielregeln","hide":true,"isEmpty":true,"pages":[{"name":"regeln","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/spielregeln/regeln.md","href":"/spiele/hive/spielregeln/regeln"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/spielregeln/index.md","href":"/spiele/hive/spielregeln"},{"name":"XML-Dokumention","hide":true,"isEmpty":true,"pages":[{"name":"einleitung-xml","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/einleitung-xml.md","href":"/spiele/hive/xml-dokumentation/einleitung-xml"},{"name":"fehler","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/fehler.md","href":"/spiele/hive/xml-dokumentation/fehler"},{"name":"spiel-betreten","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/spiel-betreten.md","href":"/spiele/hive/xml-dokumentation/spiel-betreten"},{"name":"spiel-verlassen","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/spiel-verlassen.md","href":"/spiele/hive/xml-dokumentation/spiel-verlassen"},{"name":"spielergebnis","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/spielergebnis.md","href":"/spiele/hive/xml-dokumentation/spielergebnis"},{"name":"spielstatus","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/spielstatus.md","href":"/spiele/hive/xml-dokumentation/spielstatus"},{"name":"spielverlauf","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/spielverlauf.md","href":"/spiele/hive/xml-dokumentation/spielverlauf"},{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/xml-dokumentation.md","href":"/spiele/hive/xml-dokumentation/xml-dokumentation"},{"name":"zuege-senden","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/zuege-senden.md","href":"/spiele/hive/xml-dokumentation/zuege-senden"},{"name":"zug-anforderung","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/zug-anforderung.md","href":"/spiele/hive/xml-dokumentation/zug-anforderung"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/xml-dokumentation/index.md","href":"/spiele/hive/xml-dokumentation"}],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/hive/index.md","href":"/spiele/hive"},{"name":"Mississippi Queen","expanded":true,"isEmpty":false,"pages":[{"name":"Spielregeln","index":1,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/mississippi-queen/regeln.md","href":"/spiele/mississippi-queen/regeln"},{"name":"XML-Elemente","index":2,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/mississippi-queen/xml.md","href":"/spiele/mississippi-queen/xml"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/mississippi-queen/index.md","href":"/spiele/mississippi-queen"},{"name":"Ostseeschach","hide":true,"isEmpty":false,"pages":[{"name":"regeln","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/ostseeschach/regeln.md","href":"/spiele/ostseeschach/regeln"},{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/ostseeschach/xml-dokumentation.md","href":"/spiele/ostseeschach/xml-dokumentation"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/ostseeschach/index.md","href":"/spiele/ostseeschach"},{"name":"Piranhas","hide":true,"isEmpty":false,"pages":[],"sections":[{"name":"Spielregeln","hide":true,"isEmpty":true,"pages":[{"name":"regeln","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/spielregeln/regeln.md","href":"/spiele/piranhas/spielregeln/regeln"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/spielregeln/index.md","href":"/spiele/piranhas/spielregeln"},{"name":"XML-Dokumentation","hide":true,"isEmpty":true,"pages":[{"name":"einleitung-xml","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/einleitung-xml.md","href":"/spiele/piranhas/xml-dokumentation/einleitung-xml"},{"name":"fehler","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/fehler.md","href":"/spiele/piranhas/xml-dokumentation/fehler"},{"name":"spiel-betreten","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/spiel-betreten.md","href":"/spiele/piranhas/xml-dokumentation/spiel-betreten"},{"name":"spiel-verlassen","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/spiel-verlassen.md","href":"/spiele/piranhas/xml-dokumentation/spiel-verlassen"},{"name":"spielergebnis","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/spielergebnis.md","href":"/spiele/piranhas/xml-dokumentation/spielergebnis"},{"name":"spielstatus","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/spielstatus.md","href":"/spiele/piranhas/xml-dokumentation/spielstatus"},{"name":"spielverlauf","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/spielverlauf.md","href":"/spiele/piranhas/xml-dokumentation/spielverlauf"},{"name":"xml-dokumentation","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/xml-dokumentation.md","href":"/spiele/piranhas/xml-dokumentation/xml-dokumentation"},{"name":"zuege-senden","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/zuege-senden.md","href":"/spiele/piranhas/xml-dokumentation/zuege-senden"},{"name":"zug-anforderung","repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/zug-anforderung.md","href":"/spiele/piranhas/xml-dokumentation/zug-anforderung"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/xml-dokumentation/index.md","href":"/spiele/piranhas/xml-dokumentation"}],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/piranhas/index.md","href":"/spiele/piranhas"}],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/spiele/index.md","href":"/spiele"},{"name":"Entwicklung eines Computerspielers","index":2,"isEmpty":false,"pages":[{"name":"Das Spiel kennenlernen","index":1,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/kennenlernen.md","href":"/entwicklung/kennenlernen"},{"name":"Objektorientierte Programmierung","index":3,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/einfuehrung-oop.md","href":"/entwicklung/einfuehrung-oop"},{"name":"Sauberer Programmierstil","index":4,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/sauberer-programmierstil.md","href":"/entwicklung/sauberer-programmierstil"},{"name":"Installation von Java","index":5,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/installation-von-java.md","href":"/entwicklung/installation-von-java"},{"name":"Einrichtung der Entwicklungsumgebung","index":6,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/einrichtung-der-entwicklungsumgebung.md","href":"/entwicklung/einrichtung-der-entwicklungsumgebung"},{"name":"Bedienung von Eclipse","index":7,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/bedienung-von-eclipse.md","href":"/entwicklung/bedienung-von-eclipse"},{"name":"Spielervorlage erweitern","index":7,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/simpleclient-erweitern.md","href":"/entwicklung/simpleclient-erweitern"},{"name":"Idee implementieren","index":8,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/eine-idee-implementieren.md","href":"/entwicklung/eine-idee-implementieren"},{"name":"Computerspieler abgabefertig machen","index":9,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/abgabe.md","href":"/entwicklung/abgabe"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/entwicklung/index.md","href":"/entwicklung"},{"name":"Allgemeine XML-Dokumentation","index":4,"isEmpty":true,"pages":[{"name":"Einführung in XML","index":1,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/xml/intro.md","href":"/xml/intro"},{"name":"XML-Protokoll","index":2,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/xml/protokoll.md","href":"/xml/protokoll"},{"name":"Verwaltung von Spielen mittels authentifiziertem  Client","index":3,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/xml/administration.md","href":"/xml/administration"}],"sections":[],"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/xml/index.md","href":"/xml"}],"pages":[{"name":"Überblick","index":1,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/index.md","href":"/"},{"name":"Technische Grundlagen","index":2,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/glossar.md","href":"/glossar"},{"name":"Die Software-Challenge","index":3,"expanded":true,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/wettbewerb.md","href":"/wettbewerb"},{"name":"Wettkampfmodalitäten","index":3,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/wettkampf.md","href":"/wettkampf"},{"name":"F.A.Q.","index":4,"repo":"https://github.com/software-challenge/docs/tree/main/hyperbook/book/faq.md","href":"/faq"}]}},"__N_SSG":true}