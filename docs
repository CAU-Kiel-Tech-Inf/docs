#!/bin/sh

game="ostseeschach"

action=$1
shift 2>/dev/null

outdir="out"
set -e

case $action in
(all)
  rm -rf "$outdir"
  $0 setup live
  $0 generate pdf
  ;;

(setup)
  echo "Installing required gems"
  which bundle >/dev/null || gem install bundler
  test "$1" = "live" && bundle config set --local with 'live' && shift
  bundle install "$@"
  ;;

(generate)
  PS4='+${BASH_SOURCE}:${LINENO}${FUNCNAME[0]:+-${FUNCNAME[0]}()}> '
  while test $# -gt 0; do
    case "$1" in
      (pdf) pdf="true";;
      (-v) verbose="-v" && set -o xtrace;;
      (*) game="$1";;
    esac
    shift
  done
  echo "Processing Game $game (pdf: ${pdf:-no})..."
  gamedir="spiele/$game"

  # Images
  ( echo "images"; find "$gamedir" -type d -name "images" ) | while read -r images; do
    echo "Copying $images"
    mkdir -p "$outdir/$images"
    cp --recursive $verbose "$images/." "$outdir/$images"
  done

  # HTML & PDF
  asciid() {
    target="$outdir/$(test -n "$2" && echo "$2/")$(dirname "$1")"
    echo "Converting $1 to html into $target"
    bundle exec asciidoctor $verbose \
      $(test -n "$2" && echo "-o $target/index.html" || echo "-D $target") \
      $(case $1 in (spiele/*);; (*) echo "-r asciidoctor-multipage -b multipage_html5";; esac) \
      "$1"
    test "$pdf" && case "$1" in
      (*"$game/index.md") ;;
      (*) echo "Converting $1 to pdf" && bundle exec asciidoctor-pdf $verbose -D "$target" "$1";;
    esac || true
  }

  asciid index.md
  # Separate folder to not mess up main ToC
  asciid getting-started.md "getting-started"

  find "$gamedir" -name "*.md" | while read -r.md; do
    test "$(basename ".md")" = "index.md" &&
      asciid ".md" && continue
    # save the first word of the file to $word
    read -r word _<".md";
    # do conversion if it starts with a colon i.e. has export configuration
    case "$word" in :*) asciid ".md"; esac;
  done
  ln -sfvT "$game" "$outdir/spiele/aktuell"
  ;;

(live)
  $0 generate pdf
  xdg-open "$outdir/index.html"
  bundle exec guard start
  ;;

(*)
  echo "Usage: $0 <command> [options...]
    setup - install the gems required for generate
      └─ live - also install the gems required for a live-preview
    generate - copy the images and convert the.md to html
      └─ <game> - convert a specific game
      └─ pdf - additionally convert to pdf
      └─ -v - run verbosely
    live - generate and open html, watch for updates
    clean - remove generated files
    all - setup with live and generate with pdf"
  ;;

esac
